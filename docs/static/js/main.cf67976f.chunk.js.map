{"version":3,"sources":["components/AddCategory.js","components/GitGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GitGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GitExpertApp","categories","setCategories","item","i","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACA,uBAAOO,KAAO,OACdC,MAAUT,EACVU,SAjBsB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCShBG,EAdK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE9B,OADAC,QAAQC,IAAI,CAAEJ,KAAIC,QAAOC,QAChB,sBAAKG,UAAY,yCAAjB,UACL,qBAAKC,IAAQJ,EACbK,IAAQN,IAER,kCAAMA,EAAN,OAJK,Q,uBCJAO,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbR,EADa,iDACmCS,UAAUF,GAD7C,+DAEAG,MAAMV,GAFN,cAEbW,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QATvB,kBAeZc,GAfY,4CAAH,sDCsFLK,EAjFC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAKf,ECRwB,SAACA,GAEzB,MAA0BvB,mBAAS,CAC/B6B,KAAK,GACLO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OApBAC,qBAAU,WACRjB,EAAQC,GACPiB,MAAK,SAAAC,GACJC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEd,UAGL,CAACb,IASIc,EDnByBM,CAAapB,GAAhCU,EAAb,EAAOJ,KAAcO,EAArB,EAAqBA,QAgCrB,OAAS,qCACL,mCAAOb,EAAP,OAECa,GAAS,2CACV,qBAAKjB,UAAU,YAAf,SAEwBc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIlB,aEf9B8B,EA/BM,WAGjB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmBC,EAAnB,KASA,OAAQ,qCACJ,8CACA,cAAC,EAAD,CAAa/C,cAAgB+C,IAC7B,uBAEA,6BAEID,EAAWd,KAAI,SAACgB,EAAMC,GAElB,OAAO,cAAC,EAAD,CAEPzB,SAAWwB,GADJA,Y,MCrBvBE,IAASC,OACP,cAAC,EAAD,IACEC,SAASC,eAAe,W","file":"static/js/main.cf67976f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); //undefined\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategorias(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    return (\r\n\r\n        <form onSubmit = { handleSubmit } >\r\n        <input type = \"text\"\r\n        value = { inputValue }\r\n        onChange = { handleInputChange }\r\n        /> \r\n        </form>\r\n\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GitGridItem = ({ id, title, url }) => {\r\n    console.log({ id, title, url });\r\n    return ( <div className = \"card animate__animated animate__fadeIn\" >\r\n        <img src = { url }\r\n        alt = { title }\r\n        /> \r\n        <p> { title } </p> </div>\r\n    )\r\n}\r\n\r\nGitGridItem.propTypes = {\r\n\r\n}\r\n\r\nexport default GitGridItem","\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uzYTcrQDccxhBloAMMSi4stS0KO5BAeW`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }\r\n\r\n    );\r\n    \r\n    return gifs;\r\n}","import React, { useState, useEffect } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport GitGridItem from './GitGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n    // const [images, setImages] = useState([])\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n   \r\n\r\n    // useEffect(() => {\r\n    //     //forma larga\r\n    //     // getGifs(category).then(\r\n    //     //     imgs => setImages(imgs)\r\n    //     // );\r\n    //     // forma corta\r\n    //     getGifs(category).then(setImages);\r\n    // },[category]);\r\n\r\n    // const getGifs = async() => {\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uzYTcrQDccxhBloAMMSi4stS0KO5BAeW`;\r\n    //     const resp = await fetch(url);\r\n    //     const {data} = await resp.json();\r\n    //     const gifs = data.map( img => {\r\n    //         return {\r\n    //             id: img.id,\r\n    //             title: img.title,\r\n    //             url: img.images?.downsized_medium.url\r\n    //         }\r\n    //     }\r\n\r\n    //     );\r\n    //     console.log(gifs);\r\n    //     setImages(gifs);\r\n    // }\r\n\r\n    // getGifs();\r\n\r\n    return ( <>\r\n        <h3> { category } </h3> \r\n       \r\n        {loading&&<p>Loading...</p>}\r\n        <div className=\"card-grid\">\r\n                              {\r\n                                images.map(img => (\r\n                                    <GitGridItem \r\n                                    key={img.id} \r\n                                    {...img}>\r\n                                    </GitGridItem>\r\n                                    ))\r\n                            }\r\n                        \r\n                      \r\n                    </div>\r\n\r\n        {\r\n            /* <div className=\"card-grid\">\r\n                          \r\n\r\n                              {\r\n                                images.map(img => (\r\n                                    <GitGridItem \r\n                                    key={img.id} \r\n                                    {...img}>\r\n                                    </GitGridItem>\r\n                                    ))\r\n                            }\r\n                        \r\n                      \r\n                    </div> */\r\n        } \r\n        { /* <h3>{count}</h3> */ } \r\n        \r\n        { /* <button onClick={() => setCount(count + 1)}>Add</button> */ } \r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGrid","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n      getGifs(category)\r\n      .then(imgs => {\r\n        setTimeout(() => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        }, 3000);\r\n          \r\n      })\r\n    },[category]);\r\n\r\n    // setTimeout(()=>{\r\n    //     setState({\r\n    //         data:[1,2,3,4,5],\r\n    //         loading: false\r\n    //     });\r\n    // }, 3000)\r\n\r\n    return state; // {data:[], loading:true}\r\n\r\n}","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GitExpertApp = () => {\r\n\r\n    // const categories = ['Miguel','Jessica', 'Calispa'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd =(e) => {\r\n    //    // categories.push('Yepez'); No usar\r\n    //    setCategories([...categories,'Yepez']); //agrega al final\r\n    // //    setCategories(['Esthefania',...categories]); //agrega al inicio\r\n    // //    setCategories(cats => [...cats, 'Casados Felices']);\r\n    // };\r\n\r\n    return (<>\r\n        <h2>GitExpertApp</h2>\r\n        <AddCategory setCategorias={ setCategories }></AddCategory>\r\n        <hr />\r\n        {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n        <ol>\r\n            {\r\n            categories.map((item, i) => {\r\n                // return <li key={item}>{item}</li>\r\n                return <GifGrid \r\n                key = {item}\r\n                category={ item }></GifGrid>\r\n            }) \r\n            }\r\n        </ol>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n  <GitExpertApp / > ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}